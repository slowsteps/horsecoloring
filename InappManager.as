package  {		import com.adobe.ane.productStore.Product;    import com.adobe.ane.productStore.ProductEvent;    import com.adobe.ane.productStore.ProductStore;    import com.adobe.ane.productStore.Transaction;    import com.adobe.ane.productStore.TransactionEvent;    import flash.text.TextField;    import flash.text.TextFormat;			public class InappManager {				private var mymain:Main		public var mytextfield:TextField		public var productStore:ProductStore		public var inappReadyForBuying:Boolean = false		private var myproductid:String = "horsecoloring_iapp_0"				public function InappManager(inmain) {			mymain = inmain			createDebugUtil()			if (check_isSupported()) get_Product()					}	  	protected function check_isSupported():Boolean {			productStore=new ProductStore()			echo("product store is supported: "+ ProductStore.isSupported); //on device			echo("product store is available: "+ productStore.available);  //user has not blocked inapp			//TODO check for online			if (ProductStore.isSupported && productStore.available ) return true			else return false		}						public function get_Product():void {			echo("in get_Product");			productStore.addEventListener(ProductEvent.PRODUCT_DETAILS_SUCCESS,productDetailsSucceeded);			productStore.addEventListener(ProductEvent.PRODUCT_DETAILS_FAIL, productDetailsFailed);						var vector:Vector.<String> = new Vector.<String>(1);			vector[0] = myproductid;			productStore.requestProductsDetails(vector);			echo( "requesting details for: "+ vector);		}				public function productDetailsSucceeded(e:ProductEvent):void {			echo("in productDetailsSucceeded "+e);			var i:uint=0;			while(e.products && i < e.products.length)			{				var p:Product = e.products[i];				echo("\nTITLE: " + p.title + "\nDescription: " + p.description + "\nIdentifier : " + p.identifier + "PriceLocale : " + p.priceLocale + "\nPrice: " + p.price);				echo("title : "+p.title);				echo("description: "+p.description);				echo("identifier: "+p.identifier);				echo("priceLocale: "+p.priceLocale);				echo("price :"+p.price);				i++;			}						inappReadyForBuying = true				        }				public function productDetailsFailed(e:ProductEvent):void {			echo("in productDetailsFailed"+e);			var i:uint=0;			while(e.invalidIdentifiers && i < e.invalidIdentifiers.length)			{				echo(e.invalidIdentifiers[i]);				i++;			}		}						public function makePurchase() {			if (this.inappReadyForBuying) {				echo("in makepurchase")				productStore.addEventListener(TransactionEvent.PURCHASE_TRANSACTION_SUCCESS, purchaseTransactionSucceeded);				productStore.addEventListener(TransactionEvent.PURCHASE_TRANSACTION_CANCEL, purchaseTransactionCanceled);				productStore.addEventListener(TransactionEvent.PURCHASE_TRANSACTION_FAIL, purchaseTransactionFailed);				productStore.makePurchaseTransaction(myproductid,1);			}			else echo("in apps not ready for buying")		}				protected function purchaseTransactionSucceeded(e:TransactionEvent):void {			 echo("in *purchaseTransactionSucceeded* " +e);			 mymain.onUserHasPaid();			 var i:uint=0;			 while(e.transactions && i < e.transactions.length)			 {			   var t = e.transactions[i];			   printTransaction(t);			   i++;			 }			 getPendingTransaction(productStore);		}		protected function purchaseTransactionCanceled(e:TransactionEvent):void{			echo("in *purchaseTransactionCanceled* "+e);			var i:uint=0;			while(e.transactions && i < e.transactions.length)			{				var t:Transaction = e.transactions[i];				printTransaction(t);				i++;				echo("*FinishTransactions* " + t.identifier);				productStore.addEventListener(TransactionEvent.FINISH_TRANSACTION_SUCCESS, finishTransactionSucceeded);				productStore.finishTransaction(t.identifier);			}			getPendingTransaction(productStore);		}            		protected function purchaseTransactionFailed(e:TransactionEvent):void		{			echo("in *purchaseTransactionFailed* "+e);			var i:uint=0;			while(e.transactions && i < e.transactions.length)			{				var t:Transaction = e.transactions[i];				printTransaction(t);				i++;				echo("FinishTransactions" + t.identifier);				productStore.addEventListener(TransactionEvent.FINISH_TRANSACTION_SUCCESS, finishTransactionSucceeded);				productStore.finishTransaction(t.identifier);			}			getPendingTransaction(productStore);		}            		protected function finishTransactionSucceeded(e:TransactionEvent):void{			echo("in *finishTransactionSucceeded* " +e);			var i:uint=0;			while(e.transactions && i < e.transactions.length)			{				var t:Transaction = e.transactions[i];				printTransaction(t);				i++;			}		}				public function getPendingTransaction(prdStore:ProductStore):void		{			trace("pending transaction");			var transactions:Vector.<Transaction> = prdStore.pendingTransactions; 			var i:uint=0;			while(transactions && i<transactions.length)			{				var t:Transaction = transactions[i];				printTransaction(t);				i++;			}		}				public function printTransaction(t:Transaction):void {			echo("\n-------------------in Print Transaction----------------------");			echo("identifier :"+t.identifier);			echo("productIdentifier: "+ t.productIdentifier);			echo("productQuantity: "+t.productQuantity);			echo("date: "+t.date);			echo("receipt: "+t.receipt);			echo("error: "+t.error);			echo("originalTransaction: "+t.originalTransaction);			if(t.originalTransaction)				printTransaction(t.originalTransaction);			echo("---------end of print transaction----------------------------\n");        }        		private function createDebugUtil() {			var myformat = new TextFormat(null,18)			mytextfield = new TextField()			mytextfield.setTextFormat(myformat);			mytextfield.multiline = true			mytextfield.wordWrap = true			mytextfield.background = true			mytextfield.border = true			mytextfield.height = 600			mytextfield.width = 700			mytextfield.y = 100			mytextfield.x = 10			mytextfield.visible = false			mymain.addChild(mytextfield)					}		public function echo(str:String) {			mytextfield.text = mytextfield.text + "\n" + str		}	}	}