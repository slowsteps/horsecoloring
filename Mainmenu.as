package  {		import flash.events.MouseEvent;	import flash.events.TouchEvent;	import flash.ui.Multitouch;	import flash.ui.MultitouchInputMode;		import flash.events.Event;			import flash.display.MovieClip;	import flash.events.Event;	import com.greensock.TweenLite;	import com.greensock.TweenMax;		import com.greensock.*;	import com.greensock.easing.*;	import flash.media.Sound			public class Mainmenu extends MovieClip {				var mymain:Main		var achievementslist		var thumbs:Array		var restore:MovieClip		public var inappManager:InappManager						public function Mainmenu(inMain) {						mymain = inMain			showDrawingPreviews()						this.clearcookiebutton.visible = false			this.testbuybutton.visible = false			this.clearcookiebutton.addEventListener(MouseEvent.CLICK,clearCookie)			this.testbuybutton.addEventListener(MouseEvent.CLICK,onTestBuy)			addEventListener("inappcancelled",onCancel) 						if (!mymain.payingUser) {				restore = new RestoreButton()				addChild(restore)				restore.x = 0.5*mymain.stage.fullScreenWidth				restore.y = restore.height/2 + mymain.padding				restore.addEventListener(MouseEvent.CLICK,this.onRestorePurchase)				mymain.dispatcher.addEventListener(CustomEvent.ON_INAPP_CANCELLED,onRestoreCancel)				mymain.dispatcher.addEventListener(CustomEvent.ON_INAPP_BUY,onPaid)			}					}				private function onTestBuy(e) {			mymain.alert("test buy")			mymain.dispatcher.dispatchEvent(new CustomEvent(CustomEvent.ON_INAPP_BUY))		}					private function onCancel(e:Event) {			trace("cancel received in mainmenu")		}					function clearCookie(e:Event) {			mymain.cookie.clear()			mymain.alert("Cookie cleared")					}						private function onRestorePurchase(e:Event) {			restore.removeEventListener(MouseEvent.CLICK,this.onRestorePurchase)			restore.alpha=0.5			mymain.alert("restore starting..please wait")			this.inappManager = new InappManager(this.mymain,"restore")			TweenMax.to(restore,0.3,{alpha:0.5,yoyo:true,repeat:-1,overwrite:false})		}				private function onRestoreCancel(e:Event) {			restore.addEventListener(MouseEvent.CLICK,this.onRestorePurchase)			restore.alpha=1.0			mymain.alert("restored canncelled or failed")			TweenMax.to(restore,0.3,{alpha:1.0,yoyo:false,overwrite:true})		}						private function onPaid(e:Event) {			restore.visible = false		}				//make array of drawings, loop though them and display,				private function showDrawingPreviews() {			thumbs = new Array() 			var thumb:Thumbnail = new Thumbnail(this,mymain,new Horsedrawing(),0,new IconHorse())			thumb.openSound = new HorseSound()			addChild(thumb)			thumbs.push(thumb)			var thumb = new Thumbnail(this,mymain,new Unicorndrawing(),4,new IconUnicorn())			thumb.openSound = new UnicornSound()			addChild(thumb)			thumbs.push(thumb)			var thumb = new Thumbnail(this,mymain,new Stabledrawing(),1,new IconStable())			thumb.openSound = new StableSound()			addChild(thumb)			thumbs.push(thumb)						var thumb = new Thumbnail(this,mymain,new Crocodiledrawing(),2,new IconCrocodile())			thumb.openSound = new CrocodileSound()			addChild(thumb)			thumbs.push(thumb)						var thumb = new Thumbnail(this,mymain,new Dolphindrawing(),3,new IconDolphin())			thumb.openSound = new DolphinSound()			addChild(thumb)			thumbs.push(thumb)						var thumb = new Thumbnail(this,mymain,new Giraffedrawing(),5,new IconGiraffe())			thumb.openSound = new GiraffeSound()			addChild(thumb)			thumbs.push(thumb)						//distribute thumbs												thumbs[0].x = 0.2*mymain.stage.fullScreenWidth - thumbs[0].width/2			thumbs[1].x = 0.5*mymain.stage.fullScreenWidth - thumbs[0].width/2			thumbs[2].x = 0.8*mymain.stage.fullScreenWidth - thumbs[0].width/2						thumbs[0].y = 0.3*mymain.stage.fullScreenHeight - thumbs[0].height/2			thumbs[1].y = 0.3*mymain.stage.fullScreenHeight - thumbs[0].height/2			thumbs[2].y = 0.3*mymain.stage.fullScreenHeight - thumbs[0].height/2									thumbs[3].x = 0.2*mymain.stage.fullScreenWidth - thumbs[0].width/2			thumbs[4].x = 0.5*mymain.stage.fullScreenWidth - thumbs[0].width/2			thumbs[5].x = 0.8*mymain.stage.fullScreenWidth - thumbs[0].width/2						thumbs[3].y = 0.7*mymain.stage.fullScreenHeight - thumbs[0].height/2			thumbs[4].y = 0.7*mymain.stage.fullScreenHeight - thumbs[0].height/2			thumbs[5].y = 0.7*mymain.stage.fullScreenHeight - thumbs[0].height/2													}						public function show() {						x=-mymain.gameWidth			visible = true			mymain.gameState = "mainmenu"			TweenLite.to(this, 0.5, {x:0, ease:Cubic.easeInOut});			if (mymain.songChannel) mymain.songChannel.stop()			if (mymain.natureSongChannel) mymain.natureSongChannel.stop()			mymain.songChannel = mymain.coloringSongSound.play()		}								public function hide() {			TweenLite.to(this, 0.5, {x:-this.width,  ease:Cubic.easeInOut, onComplete:toggleVisibility});						mymain.gameState = "coloring"		}				private function toggleVisibility() {			this.visible = false		}		private function toggleAchievementsList(e:Event) {			if (achievementslist.visible == false ) {				achievementslist.visible = true			}			else achievementslist.visible = false		}		private function toggleConsole(e:Event) {			if (mymain.console.mytextfield.visible == false ) {				mymain.console.mytextfield.visible = true			}			else mymain.console.mytextfield.visible = false		}		private function clearConsole(e:Event) {			mymain.console.mytextfield.text = "cleared"		}					}	}