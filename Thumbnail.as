package  {		import flash.events.MouseEvent;	import flash.events.TouchEvent;	import flash.ui.Multitouch;	import flash.ui.MultitouchInputMode;	import flash.events.Event;	import flash.display.MovieClip;	import flash.events.Event;	import com.greensock.TweenLite;	import com.greensock.TweenMax;	import com.greensock.*;	import com.greensock.easing.*;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.media.Sound;	import flash.media.SoundChannel			public class Thumbnail extends MovieClip {				private var mymain:Main		private var mymainmenu:Mainmenu		private var myDrawingNumber:int		private var myDrawingClip:MovieClip		public var cost:int		private var padlock:MovieClip		private var buy:MovieClip		private var inAppManager:InappManager		public var openSound:Sound								public function Thumbnail(inmymainmenu:Mainmenu,inmain:Main, drawingClip:MovieClip, drawingNumber:int,drawingicon=null) {						mymain = inmain			mymainmenu = inmymainmenu			myDrawingNumber = drawingNumber			myDrawingClip = drawingClip									//load png icon directly from library			if (drawingicon) {				var png:BitmapData = drawingicon				var bmdata:BitmapData = new BitmapData(png.width,png.height)				bmdata.draw(png)				var bm:Bitmap = new Bitmap(bmdata)				this.addChild(bm)			}						if (mymain.payingUser || myDrawingNumber == 0 ) {				//trace(myDrawingNumber, "is open - paying user: ", mymain.payingUser)				addEventListener(MouseEvent.CLICK,onSelect)							}			else  {				trace(myDrawingNumber, " non-paying or not thumb 1")				padlock = new Padlock()				padlock.x = 100				padlock.y = 80				addChild(padlock)								mymain.dispatcher.addEventListener(CustomEvent.ON_INAPP_CANCELLED,onCancel)				mymain.dispatcher.addEventListener(CustomEvent.ON_INAPP_BUY,onPaid)				this.addEventListener(MouseEvent.CLICK,onBuy)			}					}						public function openLock() {						//MAKE drawing selectable			addEventListener(MouseEvent.CLICK,onSelect)			removeEventListener(CustomEvent.ON_INAPP_BUY,onPaid)			removeEventListener(CustomEvent.ON_INAPP_CANCELLED,onCancel)			//REWARDING OPENING ANIM, SHOULD BE SHOWN ONLY ONCE			TweenLite.to(padlock, 2, {y:-500, alpha:0, ease:Cubic.easeInOut, onComplete:onOpenThumb, delay:1});			mymain.alert("All drawings are now available!")		}				//end of unlock anim		private function onOpenThumb() {			padlock.visible = false		}				//user clicked padlock		private function onBuy(e:Event) {			alpha = 0.5						mymain.alert("Starting purchase..please wait")			new InappManager(this.mymain,"purchase")					}				private function onPaid(e:Event) {			trace("thumb: paid event received")			this.removeEventListener(MouseEvent.CLICK,onBuy)			openLock()		}				private function onCancel(e:Event) {			alpha = 1.0			mymain.alert("Purchase cancelled or failed")			this.addEventListener(MouseEvent.CLICK,onBuy)		}				private function onSelect(e:Event) {						//mymain.alert(openSound.toString())			//mymain.selectDrawing(myDrawingClip,myDrawingNumber);			//mymainmenu.hide()			removeEventListener(MouseEvent.CLICK,onSelect)			TweenMax.to(this, 0.1, {y:"-20", repeat:1, overwrite:true, repeatDelay:0.0, yoyo:true,onComplete:moveMenu});			var channel:SoundChannel = openSound.play()			channel.addEventListener(Event.SOUND_COMPLETE,onSoundComplete)		}				private function onSoundComplete(e:Event) {			trace("sound ready",e)		}				private function moveMenu() {			addEventListener(MouseEvent.CLICK,onSelect)			mymain.selectDrawing(myDrawingClip,myDrawingNumber);			mymainmenu.hide()		}					}	}