package  {		import flash.events.MouseEvent;	import flash.events.TouchEvent;	import flash.ui.Multitouch;	import flash.ui.MultitouchInputMode;	import flash.events.Event;	import flash.display.MovieClip;	import flash.events.Event;	import com.greensock.TweenLite;	import com.greensock.TweenMax;	import com.greensock.*;	import com.greensock.easing.*;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.media.Sound;	import flash.media.SoundChannel	import flash.utils.Timer	import flash.desktop.NativeApplication			import flash.utils.Timer;	import flash.events.TimerEvent;		public class Thumbnail extends MovieClip {				private var mymain:Main		private var mymainmenu:Mainmenu		private var myDrawingNumber:int		private var myDrawingClip:MovieClip		public var myDrawingName:String				private var padlock:MovieClip		private var buy:MovieClip		private var inAppManager:InappManager		public var openSound:Sound		private var soundDelayTimer:Timer								public function Thumbnail(inmymainmenu:Mainmenu,inmain:Main, drawingClip:MovieClip, drawingNumber:int,drawingicon=null,drawingName:String=null) {						mymain = inmain			mymainmenu = inmymainmenu			myDrawingNumber = drawingNumber			myDrawingClip = drawingClip			myDrawingName = drawingName						//load png icon directly from library			if (drawingicon) {				var png:BitmapData = drawingicon				var bmdata:BitmapData = new BitmapData(png.width,png.height,true,0x00000000)				bmdata.draw(png)				var bm:Bitmap = new Bitmap(bmdata)				this.addChild(bm)			}						//click ulocked thumb to open drawing			if (mymain.payingUser || myDrawingNumber == 0 ) {				addEventListener(TouchEvent.TOUCH_BEGIN,onSelect)			}			//click padlocked thumb to start IAP process			else  {				padlock = new PadlockHeart()				padlock.x = 0.5*this.width				padlock.y = 0.5*this.height				addChild(padlock)				addEventListener(MouseEvent.CLICK,onBuy)			}			//both locked and unlocked buttons need to be disabled an re-enabled during IAP process			mymain.dispatcher.addEventListener(CustomEvent.ON_INAPP_CANCELLED,onCancel)			mymain.dispatcher.addEventListener(CustomEvent.ON_INAPP_BUY,onPaid)			mymain.dispatcher.addEventListener(CustomEvent.ON_BUY_CLICKED,onBuyClicked)			//effect on new session			//NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE,onActivate)						//scale to device resolution			scaleX =  mymain.stage.fullScreenWidth / mymain.gameWidth			scaleY =  mymain.stage.fullScreenHeight / mymain.gameHeight					}				private function onActivate(e:Event) {						//TweenMax.from(this,2.0,{alpha:0,delay:myDrawingNumber})			//TweenMax.from(this,2.0,{y:"-50",delay:0.2*myDrawingNumber,ease:Elastic.easeInOut})					}				//end of unlock anim		private function onOpenThumb() {			padlock.visible = false		}				//user clicked padlock		private function onBuy(e:Event) {			//let otherthumbs know this one has been clicked			mymain.dispatcher.dispatchEvent(new CustomEvent(CustomEvent.ON_BUY_CLICKED))			mymain.alert("Please wait..",Message.ICON_LOADING)			new InappManager(this.mymain,"purchase")					}				//a padlock has been clicked somewhere, prevent user from clicking again while iap is busy		public function onBuyClicked(e:Event) {			alpha = 0.5			if (myDrawingNumber == 0 ) {				removeEventListener(TouchEvent.TOUCH_BEGIN,onSelect)			}			//padlocked thumbs			else {				this.removeEventListener(MouseEvent.CLICK,onBuy)			}		}								private function onPaid(e:Event) {			alpha=1.0			//re-enable drawing 0			if (myDrawingNumber == 0 ) {				addEventListener(TouchEvent.TOUCH_BEGIN,onSelect)			}			//open locks for other thumbs			else {				removeEventListener(MouseEvent.CLICK,onBuy)				addEventListener(TouchEvent.TOUCH_BEGIN,onSelect)				//padlock fly-out				TweenLite.to(padlock, 2, {y:-500, alpha:0, ease:Cubic.easeInOut, onComplete:onOpenThumb, delay:1});				mymain.alert("All drawings are now available!")			}			//stop listening to IAP events			mymain.dispatcher.removeEventListener(CustomEvent.ON_INAPP_CANCELLED,onCancel)			mymain.dispatcher.removeEventListener(CustomEvent.ON_INAPP_BUY,onPaid)			mymain.dispatcher.removeEventListener(CustomEvent.ON_BUY_CLICKED,onBuyClicked)		}								private function onCancel(e:Event) {			alpha = 1.0			if (myDrawingNumber == 0 ) {				addEventListener(TouchEvent.TOUCH_BEGIN,onSelect)			}			else {							this.addEventListener(MouseEvent.CLICK,onBuy)			}		}				private function onSelect(e:Event) {			mymain.selectDrawing(myDrawingClip,myDrawingNumber,myDrawingName);			mymainmenu.hide()			TweenMax.to(this, 0.05, {y:"20", repeat:1, overwrite:true, repeatDelay:0.0, yoyo:true});			openSound.play()		}				private function playSound(e:Event) {			trace("timer")			openSound.play()		}			}	}